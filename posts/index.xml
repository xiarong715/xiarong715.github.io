<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 风笑天的博客</title>
    <link>https://xiarong715.github.io/posts/</link>
    <description>Recent content in Posts on 风笑天的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Oct 2023 09:56:01 +0800</lastBuildDate><atom:link href="https://xiarong715.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Centos7自动更新时间</title>
      <link>https://xiarong715.github.io/posts/linux/centos/centos7%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4/</link>
      <pubDate>Mon, 09 Oct 2023 09:56:01 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/linux/centos/centos7%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4/</guid>
      <description>系统时间不对的原因
软件原因
​	虚拟机中的centos7，虚拟关机了软件时间没动。因此可以查看硬件时间是准的，但软件时间不对。用周期同步的方法。
时区不对
1 2 3  # 更改时区 rm -rf /etc/localtime cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime     查看系统时间
1  date     查看硬件时间
1  hwclock     同步时间；
1  ntpdate cn.pool.ntp.org     将系统时间写入硬件时间
1 2  hwclock -w hwclock --systohc     设置定时任务，周期更新时间
1  crontab -e   1 2  # 每小时更新一次 * */1 * * * /usr/sbin/ntpdate cn.</description>
    </item>
    
    <item>
      <title>Go接口类型变量调用方法的原则</title>
      <link>https://xiarong715.github.io/posts/go/go%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E7%9A%84%E5%8E%9F%E5%88%99/</link>
      <pubDate>Sun, 25 Jun 2023 16:38:02 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E7%9A%84%E5%8E%9F%E5%88%99/</guid>
      <description>讲解都在注释中
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66  package main import &amp;#34;fmt&amp;#34; type USB interface { start() stop() } type Camera struct { } func (c *Camera) start() { fmt.</description>
    </item>
    
    <item>
      <title>Sql使用记录</title>
      <link>https://xiarong715.github.io/posts/sql/sql%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 19 Jun 2023 10:43:29 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/sql/sql%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>go sql使用记录 1 2 3 4 5  // 带有？，需要准备数据，就用先用 prepare方法 stmt, err := sqliteDB.Prepare(&amp;#34;DELETE FROM revoke where jwt2=?&amp;#34;) // 之后，传入参数，执行操作 res, err := stmt.Exec(jwt2)   1 2 3  // 直接查询 rows, err := sqlite.Query(&amp;#34;SELECT * FROM revoke where jwt2=?&amp;#34;, jwt2) rows.Next() // 是否有结果   </description>
    </item>
    
    <item>
      <title>Go 调式器dlv</title>
      <link>https://xiarong715.github.io/posts/go/go-%E8%B0%83%E5%BC%8F%E5%99%A8dlv/</link>
      <pubDate>Mon, 12 Jun 2023 15:15:18 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go-%E8%B0%83%E5%BC%8F%E5%99%A8dlv/</guid>
      <description>参考
Delve 调试器 Delve专门为Go语言打造的调试工具。
Delve安装 1 2  # 安装最新版delve go install github.com/go-delve/delve/cmd/dlv@latest   经常使用的两种方式 1 2  dlv debug dlv attach   dlv debug 1.创建main.go文件
1 2 3 4 5 6  package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;hello delve&amp;#34;) }   2.命令行进入包所在的目录，输入dlv debug命令进入调试
dlv debug	# 进入调式命令行 (dlv) b main.main	# 设置断点：main.main (dlv) bp # 查看所有设置的断点 (dlv) vars main	# 查看全局变量（可通过正则参数过滤） (dlv) c	# 运行到下个断点处 (dlv) n # 单步执行 (dlv) args # 查看传入函数的参数 (dlv) locals	# 查看局部变量 (dlv) b main.</description>
    </item>
    
    <item>
      <title>Go 一种典型的编程方式</title>
      <link>https://xiarong715.github.io/posts/go/go-%E4%B8%80%E7%A7%8D%E5%85%B8%E5%9E%8B%E7%9A%84%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 09 Jun 2023 11:59:12 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go-%E4%B8%80%E7%A7%8D%E5%85%B8%E5%9E%8B%E7%9A%84%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F/</guid>
      <description>Go 一种典型的编程方式 把各个要用到的参数都放到一个结构体中，初始化结构体，并为结构体添加方法。避免变量散落在各处，也符合面向对象编程思想。很多的语言都采用把变量集中放到一个结构体中，比如C语言。这是编程的基本思想，所以特别提取出来説一下。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  // 演示一下 // 非常值得借鉴 // handler.go package footkeeper // 操作的结构体 type FaasHandler struct { datapath string settingpath string .</description>
    </item>
    
    <item>
      <title>Go const与iota</title>
      <link>https://xiarong715.github.io/posts/go/go%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/go%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/go-const%E4%B8%8Eiota/</link>
      <pubDate>Fri, 02 Jun 2023 09:31:36 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/go%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/go-const%E4%B8%8Eiota/</guid>
      <description>const 与 iota的搭配使用。
const关键字，用于定义常量，常量在定义时初始化，之后不能再被修改。iota第一次出现时值为0，每增加一行，其值加1。const常量没有初始化表达式时，表达式同邻近的上一行。
以上是基本原则。举几个例子説明。
1 2 3 4 5 6 7 8 9  func test1() { const ( d1 = iota	// 0  d2	// 1  d3	// 2  d4	// 3  ) fmt.Println(d1,d2,d3,d4)	// 0 1 2 3 }   1 2 3  func test2() { const }   </description>
    </item>
    
    <item>
      <title>Shell 常用用法</title>
      <link>https://xiarong715.github.io/posts/shell/shell-%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 01 Jun 2023 14:51:55 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/shell/shell-%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95/</guid>
      <description>${@:n} 从第n个参数到最后一个参数的集合。
1 2 3 4 5  # test.sh echo $@ echo ${@:2}	# 打印从第2个参数到最后一个参数 echo ${@:3}	# 打印从第3个参数到最后一个参数   1 2 3 4 5  # 第一个参数是命令本身，test.sh test.sh 1 2 3 4 5 # 2 3 4 5 # 3 4 5   </description>
    </item>
    
    <item>
      <title>Shell 一个功能脚本的分析与语法讲解</title>
      <link>https://xiarong715.github.io/posts/shell/shell-%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E8%84%9A%E6%9C%AC%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Wed, 31 May 2023 11:56:12 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/shell/shell-%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E8%84%9A%E6%9C%AC%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E8%AE%B2%E8%A7%A3/</guid>
      <description>脚本展示。用指定的方式编译并执行一个go程序。 build_run.sh用于编译并执行一个go程序。获取项目文件夹名，转化为小写，作为模块名。当项目中没有go.mod文件时，执行go mod init module_name生成go.mod。添加模块路径到go.work文件中，创建目标生成的目录。编译并执行go程序。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #!/bin/bash  PWD=`pwd` MODULE_FILE=$PWD/go.mod DIR_NAME=$(basename ${PWD}) MODULE_NAME=${DIR_NAME,,} # 大写全部转小写 # 如果没有go.mod文件 # 获取文件夹名，变小写当做模块名 if [ ! -f $MODULE_FILE ]; then go mod init $MODULE_NAME fi go work use . # 没有build/则创建 BUILD_NAME=build if [ ! -d ${BUILD_NAME} ]; then mkdir ${BUILD_NAME} fi go build -o ${BUILD_NAME}/ # 输出的目录可自动创建，上面创建目录的过程可省略。 exec ${PWD}/${BUILD_NAME}/${MODULE_NAME}   功能拆解与分析 一行一行讲解功能与语法。</description>
    </item>
    
    <item>
      <title>Go 编译、常量、变量、基本数据类型和字符串</title>
      <link>https://xiarong715.github.io/posts/go/go%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/go%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/go%E7%BC%96%E8%AF%91%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 29 May 2023 16:06:21 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/go%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/go%E7%BC%96%E8%AF%91%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>Go 学习记录。有输入，有输出，知识才能内化成自己的。为月薪30K+奋斗。
 go 编译 1 2 3 4 5 6 7 8  # GO 1.11后，加入了模块特性 go mod init gopher	# 初始化模块 go build	# 编译模块 # The -mod flag controls whether go.mod may be automatically updated and whether the vendor directory is used # -mod=mod tells the go command to ignore the vendor directory and to automatically update go.mod, for example, when an imported package is not provided by any known module.</description>
    </item>
    
    <item>
      <title>Git .gitignore文件的规则</title>
      <link>https://xiarong715.github.io/posts/git/git-.gitignore%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%84%E5%88%99/</link>
      <pubDate>Thu, 25 May 2023 14:59:52 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/git/git-.gitignore%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%84%E5%88%99/</guid>
      <description>一、.gitignore的作用
提交到github时，会忽略.gitignore中配置的文件或目录，这些文件或目录是临时产生的，对项目没影响。
二. .gitignore的规则
  #开头的为注释
  忽略文件和目录
# 注释target如文件结构：
FastAPItargetpytargettool.md会忽略根目录和子目录下的 target 目录和 target文件。
  仅忽略同名文件，不忽略同名目录
target!target/只会忽略同名的文件，不会忽略同名的目录
  仅忽略同名目录
target/只忽略target目录
  .gitignore参考</description>
    </item>
    
    <item>
      <title>Git 常见问题收集</title>
      <link>https://xiarong715.github.io/posts/git/git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</link>
      <pubDate>Thu, 25 May 2023 14:02:05 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/git/git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</guid>
      <description>1.git首次安装，下载项目时出现
git: &amp;lsquo;remote-https&amp;rsquo; is not a git command. See &amp;lsquo;git &amp;ndash;help&amp;rsquo;.
1 2  yum install libcurl-devel # recomplie git again   2.在windows上产生的文件，上传到github时
warning: in the working copy of ‘xxx.html’, LF will be replaced by CRLF the next time Git touches it
参考
Dos/Windows平台默认的换行符：回车（CR）+ 换行（LF），即\r\n。
Mac/Linux平台默认的换行符：换行（LF），即\n。
企业服务器一般都是Linux系统，所以会有替换换行符的需求。
方法一：
适用于Windows系统，且一般为Windows默认设置。在Windows上编写代码，在提交到服务器时，对换行符进行CRLF-LF的转换，检出时又会进行LF-CRLF的转换
1  $ git config --global core.autocrlf true   方法二：
适用于Linux系统，所有换行符都会进行CRLF-LF转换，但不会转换回CRLF。
1  $ git config --global core.autocrlf input   方法三：</description>
    </item>
    
    <item>
      <title>Git 基础</title>
      <link>https://xiarong715.github.io/posts/git/git%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 24 May 2023 18:38:08 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/git/git%E5%9F%BA%E7%A1%80/</guid>
      <description>1.基础使用
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # 在工作目录初始化新仓库 git init git remote add origin https://github.com/xiarong715/hello.git # 添加远程仓库 origin git remote add myorigin https://github.com/xiarong715/goStudy.git	# 添加远程仓库 myorigin git remote set-url myorigin git@github.com:xiarong715/goStudy.git	# 修改远程仓库 myorigin的地址 git pull origin master	# 相当于 git pull origin master:master 上传到远程仓库 # 查看修改记录 git log # 回到指定版本，如：fd789e1 git reset --hard fd789e1 # 从仓库克隆 git clone https://github.</description>
    </item>
    
    <item>
      <title>Git Branch（git分支）讲解</title>
      <link>https://xiarong715.github.io/posts/git/git-branchgit%E5%88%86%E6%94%AF%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Wed, 24 May 2023 17:37:16 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/git/git-branchgit%E5%88%86%E6%94%AF%E8%AE%B2%E8%A7%A3/</guid>
      <description>一、前言 在开发中，建议经常创建分支、合并分支和删除分支。当发布一个软件的稳定版本后，发现有一个bug，这时创建一个分支解决bug，等测试完成，解决bug后，合并新分支到master分支，最后删除新分支。
​	当开发一个新功能时，创建新分支，在新分支中添加新功能，测试没问题后，合并到master分支，最后删除新分支。git分支的好处是，在不影响稳定代码的情况下，修补bug，添加新功能；
二、git分支的使用
1.当修补bug或添加新功能时，创建分支testing
1 2 3 4 5 6 7  git branch testing	# 创建新分支testing git checkout testing	# 切换到新分支testing # 或 # 创建新分支并切到新分支testing （一步操作顶两步操作，当分支存在时会出错；切换到存在的分支时，使用 git checkout testing） git checkout -b testing   2.测试完成后，合并分支
1 2 3 4 5 6 7 8 9 10 11  # 首先切换到要合并的分支 git checkout master # 合并分支 git merge testing # 解决合并冲突，当两个分支中修改同一文件的同一地方，合并分支时就会冲突：如index.html # 首先，打开文件index.html会看到 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; ========== &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 的内容，这些内容就是冲突的位置，手动合并冲突的内容； # 然后 git add index.</description>
    </item>
    
    <item>
      <title>Centos7 问题与解决</title>
      <link>https://xiarong715.github.io/posts/linux/centos/centos7%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Thu, 18 May 2023 17:05:03 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/linux/centos/centos7%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3/</guid>
      <description>解压tar.bz2
问题：tar (child): lbzip2: Cannot exec: No such file or directory
解决：
1  yum -y install bzip2     windows和linux下回车符不一致
问题：$&#39;\r&#39;: command not found
原因：windows 与 unix下的文件格式不一致，在windows下换行符是\r\n，在unix下换行符是\n，windows文件在unix中解析失败；
解决：
方法1：set ff=unix
1 2 3  vi hello.sh # Esc 进入命令行模式 # : 底命令行模式， 输入 set ff=unix   方法2：把windows格式文件，转换为unix格式；
1 2  yum install doc2unix	# download doc2unix translate tool. doc2unix hello.sh	# translate windows format file to unix format file.</description>
    </item>
    
    <item>
      <title>Centos7 断电出错修复</title>
      <link>https://xiarong715.github.io/posts/linux/centos/centos7%E6%96%AD%E7%94%B5%E5%87%BA%E9%94%99%E4%BF%AE%E5%A4%8D/</link>
      <pubDate>Thu, 18 May 2023 16:56:07 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/linux/centos/centos7%E6%96%AD%E7%94%B5%E5%87%BA%E9%94%99%E4%BF%AE%E5%A4%8D/</guid>
      <description>参考
1.centos7断电后出现错误：
现象
Centos7：“Entering emergency mode. Exit the shell to continue”错误解决方法
输入以下命令
1  xfs_repair -v -L /dev/dm-0   经过一段时间修复，reboot 重启就能正常启动</description>
    </item>
    
    <item>
      <title>VSCode 连接 Centos7</title>
      <link>https://xiarong715.github.io/posts/vscode/vscode%E8%BF%9E%E6%8E%A5centos7/</link>
      <pubDate>Mon, 15 May 2023 15:19:27 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/vscode/vscode%E8%BF%9E%E6%8E%A5centos7/</guid>
      <description>参考 找到官方下载地址
  下载openssh for windows
openssh官方下载地址
github下载地址
注：下载openssh for linux地址
记得用Bing搜索资料。
  配置服务器信息
在vscode界面下，ctrl+p，弹出命令菜单，输入Connect to Host，选择最一个，会显示如下图片：
点击Configure SSH Hosts...，显示如下图片：
如果想更新配置文件的位置，可在想要的位置创建好配置文件，如：D:\config\vscode\ssh_config，点击Settings specify a custom configuration file，设置配置文件的绝对路径：D:\config\vscode\ssh_config。
直接点击第一项：D:\config\vscode\ssh_config，打开配置文件，修改配置信息。
  hello
  </description>
    </item>
    
    <item>
      <title>Python3 安装</title>
      <link>https://xiarong715.github.io/posts/python/python3-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 12 May 2023 16:59:24 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/python/python3-%E5%AE%89%E8%A3%85/</guid>
      <description>一、下载
查看python 版本：http://npm.taobao.org/mirrors/python/
1  wget https://registry.npmmirror.com/-/binary/python/3.9.13/Python-3.9.13.tar.xz   二、编译与安装
1 2 3 4 5  $ tar -xvf Python-3.9.13.tar.xz $ cd Python-3.9.13 $ yum install openssl-devel # install openssl $ ./configure --with-ssl $ make &amp;amp;&amp;amp; make install   三、安装pip
pip 是 Python 包管理工具。pip3.9 list可查看已安装的包，包括有pip、setuptools、numpy等其他包；
1 2 3  $ pip3.9 list	# check package installed $ pip3.9 install --upgrade xxx	# upgrade a package $ pip3.9 install --upgrade pip	# upgrade pip   三种安装方法：</description>
    </item>
    
    <item>
      <title>Docker 安装与使用</title>
      <link>https://xiarong715.github.io/posts/docker/docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 14 Mar 2023 17:35:08 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/docker/docker%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description>参考1 编写Dockerfile，命令作用
参考2 镜像构建过程，命令作用
  docker安装
1 2 3  yum update curl -fsSL https://get.docker.com/ | sh # install lastest docker yum install docker # it&amp;#39;s not lastest docker     docker配置与启动
设置云镜像地址
1  vi /etc/docker/daemon.json   1 2 3  { &amp;#34;registry-mirrors&amp;#34;:[&amp;#34;https://nbamvavl.mirrors.aliyuns.com&amp;#34;] }   1 2 3  systemctl daemon-reload # enable daemon.json systemctl restart docker # restart docker systemctl enable docker # start docker when system start     docker的使用</description>
    </item>
    
    <item>
      <title>健康秘诀 护肝养肾</title>
      <link>https://xiarong715.github.io/posts/health/%E5%81%A5%E5%BA%B7%E7%A7%98%E8%AF%80-%E6%8A%A4%E8%82%9D%E5%85%BB%E8%82%BE/</link>
      <pubDate>Thu, 16 Feb 2023 11:36:28 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/health/%E5%81%A5%E5%BA%B7%E7%A7%98%E8%AF%80-%E6%8A%A4%E8%82%9D%E5%85%BB%E8%82%BE/</guid>
      <description>  健康的秘诀是什么？
护肝养肾
  护肝养肾的作用？
保持健康。肝肾是过滤毒素，排毒素的主要场所，一旦受损，毒素不能好的排出体外，身份将充满毒素。
  如何护肝养肾 ？
作息
​	早起早睡。
饮食
​	每天饮水2000ml-3000ml。吃新鲜绿叶蔬菜、水果，高质量蛋白，多吃一些燕麦，玉米，花生，胡萝卜，山楂，无花果。枸杞、桑葚、黑芝麻、山药、黑木耳、核桃、栗子。
​	按时按量吃饭。
可以做为主食的粗粮
​	谷物类有糙米、小米、红米、黑米、薏米、玉米、麦麸、高粱、大麦、燕麦、荞麦等。
​	杂豆类有黄豆、绿豆、红豆、芸豆、赤豆、黑豆、蚕豆、豌豆等。
​	块茎类有红薯、紫薯、山药、芋头、土豆等。
运动
​	每天适当体育锻炼，增强体质。
情绪
​	心情愉悦，不生气。提升思维层次，保持情绪稳定。
禁忌
​	忌烟忌酒。忌油腻油炸食物。
  </description>
    </item>
    
    <item>
      <title>大小端</title>
      <link>https://xiarong715.github.io/posts/linux/%E5%A4%A7%E5%B0%8F%E7%AB%AF/</link>
      <pubDate>Sat, 08 Jan 2022 17:22:30 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/linux/%E5%A4%A7%E5%B0%8F%E7%AB%AF/</guid>
      <description>  什么是字节序
字节：计算机中，数据存储是以字节为单位的，一个字节有8位，位是计算机最小的存储空间。
强类型的编程语言，每个变量的定义都是确定类型的，不同的类型占用的字节数不一样。比如，在C语言中，char类型占用一个字节，short类型，一般占用两个字节，int类型，一般占用四个字节。那么这些多字节的数据如何在内存中存放呢，内存地址是从0一直递增的，可能的存放顺序是，数据的低字节位存放在内存的低地址，数据的高字节位存放内存在内存的高地址；或者反之，数据的低字节存放在内存的高地址，数据的高字节存放在内存的低地址；多字节的高低字节在内存中存放的顺序，称为字节序；
内存的最小单位是字节，有些数据类型占用的空间大小超过了一个字节，那么就存在一个数据在内存中如何存放的问题。数据的存放可以是，数据的低字节存放在内存的低地址区，也可以是，数据的低字节存放在内存的高地址区；
如下图所示，大端存储：数字的低字节存入内存的高地址区，数字的高字节区存入内存的低地址区；小端存储：数字的低字节存入内存的高地址区，数字的高字节存入内存的低地址区；
​
这两种存储方式，没有好坏之分，存储方式与CPU的实现有关；
  什么是大小端
当数据的低字节存入内存的高地址区，数据的高字节存入内存的低地址区时，称为大端模式；反之，则称为小端模式；大端模式，比较适合人的阅读习惯，从数字的高位开始读；
  存在的意义
根据不同的硬件实现，大小端模式都广泛使用在不同的CPU中；
  如何判断大小端
不管CPU是使用大端模式还是小端模式，CPU总能正确的读取内存的值，也就是説如果不需要大小端转换时，不需要知道CPU的大小端。当处理音频数据时，有时需要转换大小端；音频音质较高时，音频的一个采样占用。
  </description>
    </item>
    
    <item>
      <title>Go 导入自定义包</title>
      <link>https://xiarong715.github.io/posts/go/go%E5%AF%BC%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85/</link>
      <pubDate>Sun, 11 Apr 2021 11:33:28 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go%E5%AF%BC%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85/</guid>
      <description>1.自定义包
为了模块化编程，需要把属于同一功能的源文件放在同一目录下，并在文件开头加上package calc，calc即为包名，包名与目录名可以不相同；
如：
goStudy/package/calc/operation.go
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  package calc func Add(a, b int) int { return a + b } func Sub(a, b int) int { return a - b } func Multi(a, b int) int { return a * b } func Division(a, b int) int { return a / b }   goStudy/package/snow/use.</description>
    </item>
    
    <item>
      <title>Linux 标准输入输出</title>
      <link>https://xiarong715.github.io/posts/linux/linux%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link>
      <pubDate>Fri, 12 Feb 2021 18:40:12 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/linux/linux%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid>
      <description>  标准输出输出设备
0代表标准输入
1代表标准输出
2代表标错误输出
  空设备文件
/dev/null代表Linux的空设备文件
  重定向到”黑洞“
1&amp;gt;/dev/null 代表标准输出重定向到”黑洞“；
2&amp;gt;/dev/null代表错误输出重定向到”黑洞“；
  重定向输入输出
&amp;amp;1表示标准输出设备；
2&amp;gt;&amp;amp;1代表错误输出重定向到标准输出；
2&amp;gt;1则会把错误输出到文件1，&amp;amp;1才表明是标准输出；
  </description>
    </item>
    
    <item>
      <title>Linux 任务前后台切换</title>
      <link>https://xiarong715.github.io/posts/linux/linux%E4%BB%BB%E5%8A%A1%E5%89%8D%E5%90%8E%E5%8F%B0%E5%88%87%E6%8D%A2/</link>
      <pubDate>Fri, 12 Feb 2021 18:19:40 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/linux/linux%E4%BB%BB%E5%8A%A1%E5%89%8D%E5%90%8E%E5%8F%B0%E5%88%87%E6%8D%A2/</guid>
      <description> 查看后台运行的任务  jobs查看当前有多少任务在后台运行
1  jobs   切换后台任务到前台  fg(foreground)将后台中的任务调至前台继续运行
1  fg   前台任务切换到后台  ctrl + z可以将一个正在前台执行的任务放到后台，并且暂停运行
1  ctrl + z   后台暂停的任务继续在后台运行  bg(background)将后台暂停的任务切换为运行状态
1  bg   在后台运行任务  hugo &amp;amp;将hugo任务在后台运行
1  hugo &amp;amp;   </description>
    </item>
    
    <item>
      <title>Centos7 安装与配置使用</title>
      <link>https://xiarong715.github.io/posts/linux/centos/centos7%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 11 Feb 2021 17:08:50 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/linux/centos/centos7%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8/</guid>
      <description>一、下载
镜像下载地址
1 2  http://mirrors.aliyun.com/centos/7.7.1908/isos/x86_64/CentOS-7-x86_64-DVD-1908.iso http://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-Minimal-2009.iso   二、安装
1.分区（新手方案）
​	启动分区/boot ：512M或1024M
	swap分区 ：内存的2倍
​	根分区 / ：剩余的空间
2.设置静态IP及DNS
设置静态IP
1 2 3 4 5 6 7 8  vi /etc/sysconfig/network-scripts/ifcfg-ens33 修改为： BOOTPROTO=static # 静态IP ONBOOT=yes	# 开机启动 IPADDR=192.168.80.130 # IP NETMASK=255.255.255.0 # 子网掩码 GATEWAY=192.168.80.2 # 网关   添加DNS
1 2 3 4 5 6 7 8 9  vi /etc/resolv.conf 修改为：（不推荐，/etc/resolv.conf是网络管理器创建的，网络重启会被修改） nameserver 8.8.8.8 nameserver 114.114.114.114 或 vi /etc/sysconfig/network-scripts/ifcfg-ens33 修改为：（推荐，会把变化同步到/etc/resolv.</description>
    </item>
    
    <item>
      <title>Docker Compose 使用</title>
      <link>https://xiarong715.github.io/posts/docker/docker-compose%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 29 Dec 2020 21:54:23 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/docker/docker-compose%E4%BD%BF%E7%94%A8/</guid>
      <description>1.docker-compose的作用
方便管理docker容器
2.下载安装
docker-compose会依赖一些库
1  yum install -y py-pip python-dev libffi-dev openssl-dev gcc libc-dev make   下载docker-compose
1 2 3  curl -L &amp;#34;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose curl -L &amp;#34;https://github.com/docker/compose/releases/download/v2.18.1/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /user/local/bin/docker-compose (待验证)   添加执行权限
1  chmod +x /usr/local/bin/docker-compose   测试
1 2 3 4 5 6 7  docker-compose version ## 显示以下信息，表明docker-compose安装完成 docker-compose version 1.26.1, build f216ddbf docker-py version: 4.2.2 CPython version: 3.</description>
    </item>
    
    <item>
      <title>Docker 学习</title>
      <link>https://xiarong715.github.io/posts/docker/docker%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 23 Dec 2020 20:54:22 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/docker/docker%E5%AD%A6%E4%B9%A0/</guid>
      <description>1.docker的编写
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  FROMregistry.lan:5000/ipanel/centos7-devMAINTAINERiPanel Cloud TeamLABEL Vendor=&amp;#34;iPanel&amp;#34; \  License=MIT \  Version=2.0ADD CI /root/CIADD mkyaffs2image /usr/sbin/mkyaffs2imageADD rc.local /etc/rc.d/rc.localRUN chmod -v +x /root/CI -R RUN chmod -v +x /usr/sbin/mkyaffs2image RUN rpm --rebuilddb \ 	&amp;amp;&amp;amp; rpm --import \ 	http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-7 \ 	&amp;amp;&amp;amp; rpm --import \ 	https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7 \ 	&amp;amp;&amp;amp; yum -y install \ 	--setopt=tsflags=nodocs \ 	--disableplugin=fastestmirror \ 	ncurses-devel zlib-devel bzip2 git openssl file gettext glibc.</description>
    </item>
    
    <item>
      <title>Go plugin 用法</title>
      <link>https://xiarong715.github.io/posts/go/go-plugin%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 20 Dec 2020 18:12:33 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go-plugin%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>1.编写plugin部分
创建文件testplugin.go
1 2 3 4 5 6 7 8 9 10 11 12  package main import &amp;#34;fmt&amp;#34; func init() { fmt.Println(&amp;#34;load plugin&amp;#34;) } // Hello hello func Hello() { fmt.Println(&amp;#34;Hello Plugin&amp;#34;) }   note: plugin的包名必须指定为main
2.编译plugin部分
1  go build --buildmode=plugin testplugin.go   编译后会生testplugin.so
3.编写主程序部分
创建文件main.go
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  package main import &amp;#34;plugin&amp;#34; func main() { p, err := plugin.</description>
    </item>
    
    <item>
      <title>Git 环境搭建</title>
      <link>https://xiarong715.github.io/posts/git/git%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Tue, 01 Dec 2020 20:32:32 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/git/git%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>1.download a tarball
下载网址
下载最新版本git
源代码包下载地址
1  wget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.xz   2.解压
1  tar -xvf git-2.9.5.tar.xz   3.configure
1 2  cd git-2.9.5 ./configure   4.make and make install
1  make &amp;amp;&amp;amp; make install   5.测试
打印出版本号代表安装成功；
1 2  git version git version 2.9.5    problems
①fatal error: zlib.h: No such file or directory
1 2  yum search zlib yum install zlib-devel -y   ②Can&#39;t locate ExtUtils/MakeMaker.</description>
    </item>
    
    <item>
      <title>Go 语言环境搭建</title>
      <link>https://xiarong715.github.io/posts/go/go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 26 Nov 2020 21:43:24 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>1.下载
打开网址，选择稳定版本下载
https://go.dev/dl/
https://golang.org/dl/ (有墙打不开)
https://golang.google.cn/dl
https://studygolang.com/dl
1 2 3 4 5 6  // 二进制文件包下载 wget https://golang.google.cn/dl/go1.15.4.linux-amd64.tar.gz wget https://studygolang.com/dl/golang/go1.15.4.linux-amd64.tar.gz // 源码包下载 wget https://golang.google.cn/dl/go1.15.4.src.tar.gz   2.二进制文件安装
1  tar -xvzf go1.15.4.linux-amd64.tar.gz -C /usr/local   3.源码编译安装
源码需要有go环境，可以用yum安装一个，因为系统的版本更新滞后，所以有必要下载较新的版本安装
1  yum install -y go   1 2 3 4 5  解压 tar -xvzf go1.15.4.src.tar.gz -C /tools 编译 cd /tools/go/src ./all.bash   4.环境配置
1 2 3 4 5 6 7 8  vi /etc/profile 编辑文件添加下面内容： export GO111MODULE=on	# enable go moudle export GOPROXY=https://goproxy.</description>
    </item>
    
    <item>
      <title>Hugo 搭建个人博客</title>
      <link>https://xiarong715.github.io/posts/hugo/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Wed, 18 Nov 2020 21:49:37 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/hugo/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>1.Download and Install
需要安装git和go；
git环境搭建参考：
git环境搭建
go环境搭建参考：
go环境搭建
1 2 3 4 5  mkdir $HOME/src cd $HOME/src git clone https://github.com/gohugoio/hugo.git cd hugo go install --tags extended   2.Create a New Site
1  hugo new site boke   3.Add a Theme
1 2 3  cd boke git clone https://github.com/flysnow-org/maupassant-hugo.git themes/maupassant echo &amp;#39;theme = &amp;#34;maupassant&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.toml   4.Add Some Content
1 2  hugo new content/posts/hugo搭建个人博客.</description>
    </item>
    
  </channel>
</rss>
