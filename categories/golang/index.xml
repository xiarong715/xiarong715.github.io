<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 风笑天的博客</title>
    <link>https://xiarong715.github.io/categories/golang/</link>
    <description>Recent content in Golang on 风笑天的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 25 Jun 2023 16:38:02 +0800</lastBuildDate><atom:link href="https://xiarong715.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go接口类型变量调用方法的原则</title>
      <link>https://xiarong715.github.io/posts/go/go%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E7%9A%84%E5%8E%9F%E5%88%99/</link>
      <pubDate>Sun, 25 Jun 2023 16:38:02 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E7%9A%84%E5%8E%9F%E5%88%99/</guid>
      <description>讲解都在注释中
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66  package main import &amp;#34;fmt&amp;#34; type USB interface { start() stop() } type Camera struct { } func (c *Camera) start() { fmt.</description>
    </item>
    
    <item>
      <title>Go 一种典型的编程方式</title>
      <link>https://xiarong715.github.io/posts/go/go-%E4%B8%80%E7%A7%8D%E5%85%B8%E5%9E%8B%E7%9A%84%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 09 Jun 2023 11:59:12 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go-%E4%B8%80%E7%A7%8D%E5%85%B8%E5%9E%8B%E7%9A%84%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F/</guid>
      <description>Go 一种典型的编程方式 把各个要用到的参数都放到一个结构体中，初始化结构体，并为结构体添加方法。避免变量散落在各处，也符合面向对象编程思想。很多的语言都采用把变量集中放到一个结构体中，比如C语言。这是编程的基本思想，所以特别提取出来説一下。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  // 演示一下 // 非常值得借鉴 // handler.go package footkeeper // 操作的结构体 type FaasHandler struct { datapath string settingpath string .</description>
    </item>
    
    <item>
      <title>Go const与iota</title>
      <link>https://xiarong715.github.io/posts/go/go%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/go%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/go-const%E4%B8%8Eiota/</link>
      <pubDate>Fri, 02 Jun 2023 09:31:36 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/go%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/go-const%E4%B8%8Eiota/</guid>
      <description>const 与 iota的搭配使用。
const关键字，用于定义常量，常量在定义时初始化，之后不能再被修改。iota第一次出现时值为0，每增加一行，其值加1。const常量没有初始化表达式时，表达式同邻近的上一行。
以上是基本原则。举几个例子説明。
1 2 3 4 5 6 7 8 9  func test1() { const ( d1 = iota	// 0  d2	// 1  d3	// 2  d4	// 3  ) fmt.Println(d1,d2,d3,d4)	// 0 1 2 3 }   1 2 3  func test2() { const }   </description>
    </item>
    
    <item>
      <title>Go 编译、常量、变量、基本数据类型和字符串</title>
      <link>https://xiarong715.github.io/posts/go/go%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/go%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/go%E7%BC%96%E8%AF%91%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 29 May 2023 16:06:21 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/go%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/go%E7%BC%96%E8%AF%91%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>Go 学习记录。有输入，有输出，知识才能内化成自己的。为月薪30K+奋斗。
 go 编译 1 2 3 4 5 6 7 8  # GO 1.11后，加入了模块特性 go mod init gopher	# 初始化模块 go build	# 编译模块 # The -mod flag controls whether go.mod may be automatically updated and whether the vendor directory is used # -mod=mod tells the go command to ignore the vendor directory and to automatically update go.mod, for example, when an imported package is not provided by any known module.</description>
    </item>
    
    <item>
      <title>Go 导入自定义包</title>
      <link>https://xiarong715.github.io/posts/go/go%E5%AF%BC%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85/</link>
      <pubDate>Sun, 11 Apr 2021 11:33:28 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go%E5%AF%BC%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85/</guid>
      <description>1.自定义包
为了模块化编程，需要把属于同一功能的源文件放在同一目录下，并在文件开头加上package calc，calc即为包名，包名与目录名可以不相同；
如：
goStudy/package/calc/operation.go
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  package calc func Add(a, b int) int { return a + b } func Sub(a, b int) int { return a - b } func Multi(a, b int) int { return a * b } func Division(a, b int) int { return a / b }   goStudy/package/snow/use.</description>
    </item>
    
    <item>
      <title>Go plugin 用法</title>
      <link>https://xiarong715.github.io/posts/go/go-plugin%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sun, 20 Dec 2020 18:12:33 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go-plugin%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>1.编写plugin部分
创建文件testplugin.go
1 2 3 4 5 6 7 8 9 10 11 12  package main import &amp;#34;fmt&amp;#34; func init() { fmt.Println(&amp;#34;load plugin&amp;#34;) } // Hello hello func Hello() { fmt.Println(&amp;#34;Hello Plugin&amp;#34;) }   note: plugin的包名必须指定为main
2.编译plugin部分
1  go build --buildmode=plugin testplugin.go   编译后会生testplugin.so
3.编写主程序部分
创建文件main.go
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  package main import &amp;#34;plugin&amp;#34; func main() { p, err := plugin.</description>
    </item>
    
    <item>
      <title>Go 语言环境搭建</title>
      <link>https://xiarong715.github.io/posts/go/go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 26 Nov 2020 21:43:24 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>1.下载
打开网址，选择稳定版本下载
https://go.dev/dl/
https://golang.org/dl/ (有墙打不开)
https://golang.google.cn/dl
https://studygolang.com/dl
1 2 3 4 5 6  // 二进制文件包下载 wget https://golang.google.cn/dl/go1.15.4.linux-amd64.tar.gz wget https://studygolang.com/dl/golang/go1.15.4.linux-amd64.tar.gz // 源码包下载 wget https://golang.google.cn/dl/go1.15.4.src.tar.gz   2.二进制文件安装
1  tar -xvzf go1.15.4.linux-amd64.tar.gz -C /usr/local   3.源码编译安装
源码需要有go环境，可以用yum安装一个，因为系统的版本更新滞后，所以有必要下载较新的版本安装
1  yum install -y go   1 2 3 4 5  解压 tar -xvzf go1.15.4.src.tar.gz -C /tools 编译 cd /tools/go/src ./all.bash   4.环境配置
1 2 3 4 5 6 7 8  vi /etc/profile 编辑文件添加下面内容： export GO111MODULE=on	# enable go moudle export GOPROXY=https://goproxy.</description>
    </item>
    
  </channel>
</rss>
