<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on 风笑天的博客</title>
    <link>https://xiarong715.github.io/tags/git/</link>
    <description>Recent content in git on 风笑天的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 12 Jun 2023 15:15:18 +0800</lastBuildDate><atom:link href="https://xiarong715.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 调式器dlv</title>
      <link>https://xiarong715.github.io/posts/go/go-%E8%B0%83%E5%BC%8F%E5%99%A8dlv/</link>
      <pubDate>Mon, 12 Jun 2023 15:15:18 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go-%E8%B0%83%E5%BC%8F%E5%99%A8dlv/</guid>
      <description>参考
Delve 调试器 Delve专门为Go语言打造的调试工具。
Delve安装 1 2  # 安装最新版delve go install github.com/go-delve/delve/cmd/dlv@latest   经常使用的两种方式 1 2  dlv debug dlv attach   dlv debug 1.创建main.go文件
1 2 3 4 5 6  package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;hello delve&amp;#34;) }   2.命令行进入包所在的目录，输入dlv debug命令进入调试
dlv debug	# 进入调式命令行 (dlv) b main.main	# 设置断点：main.main (dlv) bp # 查看所有设置的断点 (dlv) vars main	# 查看全局变量（可通过正则参数过滤） (dlv) c	# 运行到下个断点处 (dlv) n # 单步执行 (dlv) args # 查看传入函数的参数 (dlv) locals	# 查看局部变量 (dlv) b main.</description>
    </item>
    
    <item>
      <title>Git 常见问题收集</title>
      <link>https://xiarong715.github.io/posts/git/git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</link>
      <pubDate>Thu, 25 May 2023 14:02:05 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/git/git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</guid>
      <description>1.git首次安装，下载项目时出现
git: &amp;lsquo;remote-https&amp;rsquo; is not a git command. See &amp;lsquo;git &amp;ndash;help&amp;rsquo;.
1 2  yum install libcurl-devel # recomplie git again   2.在windows上产生的文件，上传到github时
warning: in the working copy of ‘xxx.html’, LF will be replaced by CRLF the next time Git touches it
参考
Dos/Windows平台默认的换行符：回车（CR）+ 换行（LF），即\r\n。
Mac/Linux平台默认的换行符：换行（LF），即\n。
企业服务器一般都是Linux系统，所以会有替换换行符的需求。
方法一：
适用于Windows系统，且一般为Windows默认设置。在Windows上编写代码，在提交到服务器时，对换行符进行CRLF-LF的转换，检出时又会进行LF-CRLF的转换
1  $ git config --global core.autocrlf true   方法二：
适用于Linux系统，所有换行符都会进行CRLF-LF转换，但不会转换回CRLF。
1  $ git config --global core.autocrlf input   方法三：</description>
    </item>
    
    <item>
      <title>Git 基础</title>
      <link>https://xiarong715.github.io/posts/git/git%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 24 May 2023 18:38:08 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/git/git%E5%9F%BA%E7%A1%80/</guid>
      <description>1.基础使用
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  # 在工作目录初始化新仓库 git init git remote add origin https://github.com/xiarong715/hello.git # 添加远程仓库 origin git remote add myorigin https://github.com/xiarong715/goStudy.git	# 添加远程仓库 myorigin git remote set-url myorigin git@github.com:xiarong715/goStudy.git	# 修改远程仓库 myorigin的地址 git pull origin master	# 相当于 git pull origin master:master 上传到远程仓库 # 查看修改记录 git log # 回到指定版本，如：fd789e1 git reset --hard fd789e1 # 从仓库克隆 git clone https://github.</description>
    </item>
    
    <item>
      <title>Git Branch（git分支）讲解</title>
      <link>https://xiarong715.github.io/posts/git/git-branchgit%E5%88%86%E6%94%AF%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Wed, 24 May 2023 17:37:16 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/git/git-branchgit%E5%88%86%E6%94%AF%E8%AE%B2%E8%A7%A3/</guid>
      <description>一、前言 在开发中，建议经常创建分支、合并分支和删除分支。当发布一个软件的稳定版本后，发现有一个bug，这时创建一个分支解决bug，等测试完成，解决bug后，合并新分支到master分支，最后删除新分支。
​	当开发一个新功能时，创建新分支，在新分支中添加新功能，测试没问题后，合并到master分支，最后删除新分支。git分支的好处是，在不影响稳定代码的情况下，修补bug，添加新功能；
二、git分支的使用
1.当修补bug或添加新功能时，创建分支testing
1 2 3 4 5 6 7  git branch testing	# 创建新分支testing git checkout testing	# 切换到新分支testing # 或 # 创建新分支并切到新分支testing （一步操作顶两步操作，当分支存在时会出错；切换到存在的分支时，使用 git checkout testing） git checkout -b testing   2.测试完成后，合并分支
1 2 3 4 5 6 7 8 9 10 11  # 首先切换到要合并的分支 git checkout master # 合并分支 git merge testing # 解决合并冲突，当两个分支中修改同一文件的同一地方，合并分支时就会冲突：如index.html # 首先，打开文件index.html会看到 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; ========== &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 的内容，这些内容就是冲突的位置，手动合并冲突的内容； # 然后 git add index.</description>
    </item>
    
    <item>
      <title>Git 环境搭建</title>
      <link>https://xiarong715.github.io/posts/git/git%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Tue, 01 Dec 2020 20:32:32 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/git/git%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>1.download a tarball
下载网址
下载最新版本git
源代码包下载地址
1  wget https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.xz   2.解压
1  tar -xvf git-2.9.5.tar.xz   3.configure
1 2  cd git-2.9.5 ./configure   4.make and make install
1  make &amp;amp;&amp;amp; make install   5.测试
打印出版本号代表安装成功；
1 2  git version git version 2.9.5    problems
①fatal error: zlib.h: No such file or directory
1 2  yum search zlib yum install zlib-devel -y   ②Can&#39;t locate ExtUtils/MakeMaker.</description>
    </item>
    
  </channel>
</rss>
