<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on 风笑天的博客</title>
    <link>https://xiarong715.github.io/tags/shell/</link>
    <description>Recent content in shell on 风笑天的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Jun 2023 14:51:55 +0800</lastBuildDate><atom:link href="https://xiarong715.github.io/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shell 常用用法</title>
      <link>https://xiarong715.github.io/posts/shell/shell-%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 01 Jun 2023 14:51:55 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/shell/shell-%E5%B8%B8%E7%94%A8%E7%94%A8%E6%B3%95/</guid>
      <description>${@:n} 从第n个参数到最后一个参数的集合。
1 2 3 4 5  # test.sh echo $@ echo ${@:2}	# 打印从第2个参数到最后一个参数 echo ${@:3}	# 打印从第3个参数到最后一个参数   1 2 3 4 5  # 第一个参数是命令本身，test.sh test.sh 1 2 3 4 5 # 2 3 4 5 # 3 4 5   </description>
    </item>
    
    <item>
      <title>Shell 一个功能脚本的分析与语法讲解</title>
      <link>https://xiarong715.github.io/posts/shell/shell-%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E8%84%9A%E6%9C%AC%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E8%AE%B2%E8%A7%A3/</link>
      <pubDate>Wed, 31 May 2023 11:56:12 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/shell/shell-%E4%B8%80%E4%B8%AA%E5%8A%9F%E8%83%BD%E8%84%9A%E6%9C%AC%E7%9A%84%E5%88%86%E6%9E%90%E4%B8%8E%E8%AF%AD%E6%B3%95%E8%AE%B2%E8%A7%A3/</guid>
      <description>脚本展示。用指定的方式编译并执行一个go程序。 build_run.sh用于编译并执行一个go程序。获取项目文件夹名，转化为小写，作为模块名。当项目中没有go.mod文件时，执行go mod init module_name生成go.mod。添加模块路径到go.work文件中，创建目标生成的目录。编译并执行go程序。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #!/bin/bash  PWD=`pwd` MODULE_FILE=$PWD/go.mod DIR_NAME=$(basename ${PWD}) MODULE_NAME=${DIR_NAME,,} # 大写全部转小写 # 如果没有go.mod文件 # 获取文件夹名，变小写当做模块名 if [ ! -f $MODULE_FILE ]; then go mod init $MODULE_NAME fi go work use . # 没有build/则创建 BUILD_NAME=build if [ ! -d ${BUILD_NAME} ]; then mkdir ${BUILD_NAME} fi go build -o ${BUILD_NAME}/ # 输出的目录可自动创建，上面创建目录的过程可省略。 exec ${PWD}/${BUILD_NAME}/${MODULE_NAME}   功能拆解与分析 一行一行讲解功能与语法。</description>
    </item>
    
  </channel>
</rss>
