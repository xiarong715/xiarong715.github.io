<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on 风笑天的博客</title>
    <link>https://xiarong715.github.io/tags/go/</link>
    <description>Recent content in go on 风笑天的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Jun 2023 11:59:12 +0800</lastBuildDate><atom:link href="https://xiarong715.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go 一种典型的编程方式</title>
      <link>https://xiarong715.github.io/posts/go/go-%E4%B8%80%E7%A7%8D%E5%85%B8%E5%9E%8B%E7%9A%84%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Fri, 09 Jun 2023 11:59:12 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go-%E4%B8%80%E7%A7%8D%E5%85%B8%E5%9E%8B%E7%9A%84%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F/</guid>
      <description>Go 一种典型的编程方式 把各个要用到的参数都放到一个结构体中，初始化结构体，并为结构体添加方法。避免变量散落在各处，也符合面向对象编程思想。很多的语言都采用把变量集中放到一个结构体中，比如C语言。这是编程的基本思想，所以特别提取出来説一下。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  // 演示一下 // 非常值得借鉴 // handler.go package footkeeper // 操作的结构体 type FaasHandler struct { datapath string settingpath string .</description>
    </item>
    
    <item>
      <title>Go const与iota</title>
      <link>https://xiarong715.github.io/posts/go/go%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/go%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/go-const%E4%B8%8Eiota/</link>
      <pubDate>Fri, 02 Jun 2023 09:31:36 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/go%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/go-const%E4%B8%8Eiota/</guid>
      <description>const 与 iota的搭配使用。
const关键字，用于定义常量，常量在定义时初始化，之后不能再被修改。iota第一次出现时值为0，每增加一行，其值加1。const常量没有初始化表达式时，表达式同邻近的上一行。
以上是基本原则。举几个例子説明。
1 2 3 4 5 6 7 8 9  func test1() { const ( d1 = iota	// 0  d2	// 1  d3	// 2  d4	// 3  ) fmt.Println(d1,d2,d3,d4)	// 0 1 2 3 }   1 2 3  func test2() { const }   </description>
    </item>
    
    <item>
      <title>Go 编译、常量、变量、基本数据类型和字符串</title>
      <link>https://xiarong715.github.io/posts/go/go%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/go%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/go%E7%BC%96%E8%AF%91%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 29 May 2023 16:06:21 +0800</pubDate>
      
      <guid>https://xiarong715.github.io/posts/go/go%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/go%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/go%E7%BC%96%E8%AF%91%E5%B8%B8%E9%87%8F%E5%8F%98%E9%87%8F%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>Go 学习记录。有输入，有输出，知识才能内化成自己的。为月薪30K+奋斗。
 go 编译 1 2 3 4 5 6 7 8  # GO 1.11后，加入了模块特性 go mod init gopher	# 初始化模块 go build	# 编译模块 # The -mod flag controls whether go.mod may be automatically updated and whether the vendor directory is used # -mod=mod tells the go command to ignore the vendor directory and to automatically update go.mod, for example, when an imported package is not provided by any known module.</description>
    </item>
    
  </channel>
</rss>
